// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TxSpareParts.Infastructure.Data;

namespace TxSpareParts.Infastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210829121725_applyinglatestdbupdates")]
    partial class applyinglatestdbupdates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdministrativeStatus")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("Administrative Status");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Assigned To?");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DigitalAddress")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("Digital Address");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailForCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatus")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("Employee Status");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("First Name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last Name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhysicalAdress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Physical Address");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isVerified")
                        .HasColumnType("bit")
                        .HasColumnName("Is Verified");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CardDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Account Name");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Authorization Code");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Card Type");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction Email");

                    b.Property<string>("ExpMonth")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Expiry Month");

                    b.Property<string>("ExpYear")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Expiry Year");

                    b.Property<string>("PaymentChannel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Reusable")
                        .HasColumnType("bit");

                    b.Property<bool>("SavedCard")
                        .HasColumnType("bit")
                        .HasColumnName("Is Card Saved");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("last4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Last 4 digits of card");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Company", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Physical Address");

                    b.Property<double>("AvgRating")
                        .HasColumnType("float")
                        .HasColumnName("Average Rating");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Description");

                    b.Property<string>("DigitalAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Digital Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Email");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("Is Verified?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Phone Number");

                    b.Property<string>("PostOfficeBox")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company PO Box");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyImages");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyReview", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reviews");

                    b.Property<string>("CompanyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Company Rating");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("UserID");

                    b.ToTable("CompanyReviews");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyReviewLike", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyReviewID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CompanyReviewID");

                    b.HasIndex("UserID");

                    b.ToTable("CompanyReviewLikes");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Like", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("productID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("productID");

                    b.HasIndex("userID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Assignedto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hendled By");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedDeliveryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Order Date");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Order Number");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Order Status");

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<bool>("PaidFor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Paid For?");

                    b.Property<string>("RefferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tracking Number");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Product Category");

                    b.Property<string>("CompanyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product Description");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Company Manufacturer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Product Name");

                    b.Property<int>("NumberOfUpdates")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Number of Times Updated");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Product Price");

                    b.Property<int>("Quantity")
                        .HasMaxLength(200)
                        .HasColumnType("int")
                        .HasColumnName("Product Quantity");

                    b.Property<string>("from_supervisor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("From Supervisor");

                    b.Property<string>("recently_updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recently updated by");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("userID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product Image");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductReview", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reviews");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Company Rating");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductReviewLike", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductReviewID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductReviewID");

                    b.HasIndex("UserID");

                    b.ToTable("ProductReviewLikes");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GatewayResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfItems")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchasedItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("last4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ShoppingCart", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float")
                        .HasColumnName("Cart Total");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("orderID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.HasIndex("orderID");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Star", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("UserID");

                    b.ToTable("Stars");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.UserImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ApplicationUser", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_companyapplicationuser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CardDetail", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("CardDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_carddetailapplicationuser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyImage", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("CompanyImages")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_companyimagesofcompany");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyReview", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_reviewofcompanies");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("CompanyReviews")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_companyreviewsinuser");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyReviewLike", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("CompanyReviewLikes")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_companycompanyreviewlike");

                    b.HasOne("TxSpareParts.Core.Entities.CompanyReview", "CompanyReview")
                        .WithMany("CompanyReviewLikes")
                        .HasForeignKey("CompanyReviewID")
                        .HasConstraintName("FK_companyreviewcomplikes");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("CompanyReviewLikes")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_usercompanyreviewlikes");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");

                    b.Navigation("CompanyReview");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Like", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Product", "Product")
                        .WithMany("Likes")
                        .HasForeignKey("productID")
                        .HasConstraintName("FK_likeofproduct");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Likes")
                        .HasForeignKey("userID")
                        .HasConstraintName("FK_applicationuserlike");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Order", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_userofshoppingcart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Product", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_compproduct");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Products")
                        .HasForeignKey("userID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductImage", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_productimagesforproduct");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductReview", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_reviewofproducts");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_applicationuserproductreview");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductReviewLike", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Product", "Product")
                        .WithMany("ProductReviewLikes")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_productproductreviewlikes");

                    b.HasOne("TxSpareParts.Core.Entities.ProductReview", "ProductReview")
                        .WithMany("Likes")
                        .HasForeignKey("ProductReviewID")
                        .HasConstraintName("FK_theactualproductreview");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ProductReviewLikes")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_userproductreviewlikes");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");

                    b.Navigation("ProductReview");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Receipt", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("Receipts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_usersreceiptname");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ShoppingCart", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Product", "Product")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_shoppingcartforproduct");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_shoppingcartappuser");

                    b.HasOne("TxSpareParts.Core.Entities.Order", "Order")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("orderID")
                        .HasConstraintName("FK_ordershoppingcart");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Star", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.Company", "Company")
                        .WithMany("Starred")
                        .HasForeignKey("CompanyID")
                        .HasConstraintName("FK_companystar");

                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Starred")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_alluserstarred");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.UserImage", b =>
                {
                    b.HasOne("TxSpareParts.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_userimagesconstrains");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CardDetails");

                    b.Navigation("CompanyReviewLikes");

                    b.Navigation("CompanyReviews");

                    b.Navigation("Likes");

                    b.Navigation("Orders");

                    b.Navigation("ProductReviewLikes");

                    b.Navigation("ProductReviews");

                    b.Navigation("Products");

                    b.Navigation("Receipts");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("Starred");

                    b.Navigation("UserImages");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Company", b =>
                {
                    b.Navigation("CompanyImages");

                    b.Navigation("CompanyReviewLikes");

                    b.Navigation("Employees");

                    b.Navigation("Products");

                    b.Navigation("Reviews");

                    b.Navigation("Starred");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.CompanyReview", b =>
                {
                    b.Navigation("CompanyReviewLikes");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Order", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.Product", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviewLikes");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("TxSpareParts.Core.Entities.ProductReview", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
